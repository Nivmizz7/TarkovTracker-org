rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for team-based access control
    function memberOfSameTeam(userId){
      let userSystem = get(/databases/$(database)/documents/system/$(request.auth.uid));
      let targetSystem = get(/databases/$(database)/documents/system/$(userId));
      return userSystem.data.team != null && 
             userSystem.data.team == targetSystem.data.team;
    }
    
    function memberOfTeam(){
      return request.auth.uid in resource.data.members || 
             request.auth.uid == resource.data.owner;
    }
    
    function isTeamOwner(){
      return request.auth.uid == resource.data.owner;
    }
    
    function validUserData(){
      return request.resource.data.keys().hasAll(['level', 'gameEdition', 'pmcFaction']) &&
             request.resource.data.level is number &&
             request.resource.data.gameEdition is number &&
             request.resource.data.gameEdition >= 1 && request.resource.data.gameEdition <= 6 &&
             request.resource.data.pmcFaction in ['USEC', 'BEAR'];
    }
    
    // System collection - user metadata including team membership and tokens
    match /system/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Progress collection - game progress data, readable by teammates
    match /progress/{userId} {
      allow create, update, delete: if request.auth != null && 
                                      request.auth.uid == userId &&
                                      validUserData();
      allow read: if request.auth != null && (
        request.auth.uid == userId || 
        memberOfSameTeam(userId)
      );
    }
    
    // User collection - UI preferences and settings, private to user
    match /user/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Token collection - API tokens, readable only by owner
    match /token/{tokenId} {
      allow read: if request.auth != null && 
                     request.auth.uid == resource.data.owner;
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.owner &&
                       request.resource.data.keys().hasAll(['owner', 'note', 'permissions', 'calls', 'createdAt']);
      allow update: if request.auth != null && 
                       request.auth.uid == resource.data.owner &&
                       // Only allow updating calls and note fields
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['calls', 'note']);
      allow delete: if request.auth != null && 
                       request.auth.uid == resource.data.owner;
    }
    
    // Team collection - team information, readable by members
    match /team/{teamId} {
      allow read: if request.auth != null && memberOfTeam();
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.owner &&
                       request.resource.data.keys().hasAll(['owner', 'password', 'maximumMembers', 'members', 'createdAt']) &&
                       request.resource.data.maximumMembers <= 50 && // Reasonable limit
                       request.resource.data.members.size() <= request.resource.data.maximumMembers;
      allow update: if request.auth != null && (
        // Team owner can update members and maximumMembers
        (isTeamOwner() &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'maximumMembers']) &&
         request.resource.data.members.size() <= request.resource.data.maximumMembers) ||
        // Team members can remove themselves from the team
        (request.auth.uid in resource.data.members &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
         request.resource.data.members.size() == resource.data.members.size() - 1 &&
         !(request.auth.uid in request.resource.data.members) &&
         // Ensure all other members remain the same
         request.resource.data.members.toSet().difference(resource.data.members.toSet()).size() == 0)
      );
      allow delete: if request.auth != null && isTeamOwner();
    }
  }
}